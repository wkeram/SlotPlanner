name: Nightly Tests

on:
  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC daily
  workflow_dispatch:

jobs:
  comprehensive-testing:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Setup virtual display (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0 libxcb-xfixes0 libxcb-xinerama0 libxcb-cursor0

    - name: Run comprehensive test suite
      run: |
        uv run python tests/test_runner.py all
      env:
        QT_QPA_PLATFORM: ${{ runner.os == 'Linux' && 'offscreen' || '' }}
      continue-on-error: true

    - name: Run performance tests
      run: |
        uv run python tests/test_runner.py performance
      env:
        QT_QPA_PLATFORM: ${{ runner.os == 'Linux' && 'offscreen' || '' }}
      continue-on-error: true

    - name: Generate performance report
      run: |
        echo "# Performance Test Results" > performance-${{ matrix.os }}-py${{ matrix.python-version }}.md
        echo "OS: ${{ matrix.os }}" >> performance-${{ matrix.os }}-py${{ matrix.python-version }}.md
        echo "Python: ${{ matrix.python-version }}" >> performance-${{ matrix.os }}-py${{ matrix.python-version }}.md
        echo "Date: $(date)" >> performance-${{ matrix.os }}-py${{ matrix.python-version }}.md
      continue-on-error: true

    - name: Upload nightly test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nightly-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          performance-*.md
          test-results-*.xml
        retention-days: 7

  stress-testing:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python 3.13
      run: uv python install 3.13

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Setup virtual display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0

    - name: Run stress tests
      run: |
        # Create large test dataset
        python -c "
        import json
        
        # Generate large dataset for stress testing
        teachers = {}
        children = {}
        
        for i in range(100):
            teachers[f'Teacher_{i:03d}'] = {
                'name': f'Teacher {i:03d}',
                'availability': {
                    'monday': ['08:00', '09:00'] if i % 3 == 0 else [],
                    'tuesday': ['10:00', '11:00'] if i % 3 == 1 else [],
                    'wednesday': ['14:00'] if i % 3 == 2 else [],
                    'thursday': ['08:00'] if i < 50 else [],
                    'friday': ['09:00'] if i >= 50 else []
                }
            }
        
        for i in range(500):
            children[f'Child_{i:03d}'] = {
                'name': f'Child {i:03d}',
                'availability': {
                    'monday': ['08:00', '09:00'] if i % 5 == 0 else [],
                    'tuesday': ['10:00', '11:00'] if i % 5 == 1 else [],
                    'wednesday': ['14:00'] if i % 5 == 2 else [],
                    'thursday': ['08:00'] if i % 5 == 3 else [],
                    'friday': ['09:00'] if i % 5 == 4 else []
                },
                'preferred_teachers': [f'Teacher_{j:03d}' for j in range(min(5, 100))]
            }
        
        data = {
            'teachers': teachers,
            'children': children,
            'tandems': {},
            'weights': {'teacher_preference': 0.5, 'early_time': 0.3, 'tandem_fulfillment': 0.7, 'stability': 0.4}
        }
        
        with open('stress_test_data.json', 'w') as f:
            json.dump(data, f)
        "
        
        # Run stress test with timeout
        timeout 600 uv run python -c "
        import json
        from app.storage import Storage
        from app.logic import OptimizationSolver
        import tempfile
        import time
        
        with tempfile.TemporaryDirectory() as tmpdir:
            storage = Storage(data_dir=tmpdir)
            
            with open('stress_test_data.json', 'r') as f:
                data = json.load(f)
            
            storage.save('2024_2025', data)
            
            solver = OptimizationSolver(storage, '2024_2025')
            
            start_time = time.time()
            result = solver.solve()
            end_time = time.time()
            
            print(f'Stress test completed in {end_time - start_time:.2f} seconds')
            print(f'Assignments: {len(result.get(\"assignments\", []))}')
            print(f'Violations: {len(result.get(\"violations\", []))}')
        " || echo "Stress test timed out or failed"
      env:
        QT_QPA_PLATFORM: offscreen
      continue-on-error: true

    - name: Memory usage test
      run: |
        # Install memory profiling tools
        uv add memory-profiler psutil
        
        # Run memory profiling
        uv run python -c "
        import psutil
        import os
        import gc
        from app.storage import Storage
        from app.logic import OptimizationSolver
        import tempfile
        import json
        
        process = psutil.Process(os.getpid())
        
        print(f'Initial memory: {process.memory_info().rss / 1024 / 1024:.2f} MB')
        
        with tempfile.TemporaryDirectory() as tmpdir:
            storage = Storage(data_dir=tmpdir)
            
            # Load moderate dataset
            with open('stress_test_data.json', 'r') as f:
                data = json.load(f)
            
            storage.save('2024_2025', data)
            
            print(f'After data load: {process.memory_info().rss / 1024 / 1024:.2f} MB')
            
            solver = OptimizationSolver(storage, '2024_2025')
            
            print(f'After solver init: {process.memory_info().rss / 1024 / 1024:.2f} MB')
            
            result = solver.solve()
            
            print(f'After optimization: {process.memory_info().rss / 1024 / 1024:.2f} MB')
            
            del solver
            del result
            gc.collect()
            
            print(f'After cleanup: {process.memory_info().rss / 1024 / 1024:.2f} MB')
        " || echo "Memory test failed"
      env:
        QT_QPA_PLATFORM: offscreen
      continue-on-error: true

  compatibility-testing:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Test Python 3.11 compatibility
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - run: |
        uv python install 3.11
        uv sync --python 3.11
        uv run python -c "import app.gui; import app.logic; import app.storage; print('Python 3.11 compatibility: OK')"
      continue-on-error: true

    - name: Test dependency compatibility
      run: |
        # Test with minimum required versions
        uv add "pyside6==6.7.0" "ortools==9.8.0" "reportlab==4.0.0"
        uv run python -c "
        import PySide6
        import ortools
        import reportlab
        print(f'PySide6: {PySide6.__version__}')
        print(f'OR-Tools: {ortools.__version__}')  
        print(f'ReportLab: {reportlab.Version}')
        print('Minimum versions compatibility: OK')
        "
      continue-on-error: true

  nightly-summary:
    runs-on: ubuntu-latest
    needs: [comprehensive-testing, stress-testing, compatibility-testing]
    if: always()
    
    steps:
    - name: Generate nightly report
      run: |
        echo "# Nightly Test Report" > nightly-report.md
        echo "Date: $(date)" >> nightly-report.md
        echo "" >> nightly-report.md
        echo "## Test Results" >> nightly-report.md
        echo "- Comprehensive Testing: ${{ needs.comprehensive-testing.result }}" >> nightly-report.md
        echo "- Stress Testing: ${{ needs.stress-testing.result }}" >> nightly-report.md
        echo "- Compatibility Testing: ${{ needs.compatibility-testing.result }}" >> nightly-report.md
        echo "" >> nightly-report.md
        
        if [ "${{ needs.comprehensive-testing.result }}" != "success" ]; then
          echo "⚠️ Comprehensive testing failed - check test matrix results" >> nightly-report.md
        fi
        
        if [ "${{ needs.stress-testing.result }}" != "success" ]; then
          echo "⚠️ Stress testing failed - performance issues detected" >> nightly-report.md
        fi
        
        if [ "${{ needs.compatibility-testing.result }}" != "success" ]; then
          echo "⚠️ Compatibility testing failed - dependency issues detected" >> nightly-report.md
        fi
        
        cat nightly-report.md

    - name: Upload nightly report
      uses: actions/upload-artifact@v4
      with:
        name: nightly-report
        path: nightly-report.md
        retention-days: 30

    - name: Create issue on failure
      if: ${{ needs.comprehensive-testing.result == 'failure' || needs.stress-testing.result == 'failure' || needs.compatibility-testing.result == 'failure' }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('nightly-report.md', 'utf8');
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Nightly Tests Failed - ${new Date().toISOString().split('T')[0]}`,
            body: `Nightly test run failed. See details below:\n\n${report}`,
            labels: ['automated', 'testing', 'priority-high']
          });