name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python 3.13
      run: uv python install 3.13

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
        uv add ruff black isort mypy

    - name: Run ruff linting
      run: |
        uv run ruff check app/ tests/ --output-format=github
      continue-on-error: true

    - name: Run black formatting check
      run: |
        uv run black --check --diff app/ tests/
      continue-on-error: true

    - name: Run isort import sorting check
      run: |
        uv run isort --check-only --diff app/ tests/
      continue-on-error: true

    - name: Run mypy type checking
      run: |
        uv run mypy app/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  quick-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python 3.13
      run: uv python install 3.13

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Setup virtual display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libegl1-mesa-dev libxcb-xinerama0

    - name: Run fast tests
      run: |
        uv run python tests/test_runner.py fast
      env:
        QT_QPA_PLATFORM: offscreen

    - name: Run optimizer tests
      run: |
        uv run python tests/test_runner.py optimizer  
      env:
        QT_QPA_PLATFORM: offscreen

  documentation-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Check README.md exists and is updated
      run: |
        if [ ! -f "README.md" ]; then
          echo "README.md is missing"
          exit 1
        fi
        
        # Check if README was modified in this PR
        git fetch origin main
        if git diff origin/main --name-only | grep -q "README.md"; then
          echo "README.md was updated in this PR"
        fi

    - name: Check CLAUDE.md compliance
      run: |
        if [ ! -f "CLAUDE.md" ]; then
          echo "CLAUDE.md is missing"
          exit 1
        fi
        
        # Check for key sections
        if ! grep -q "## Commands" CLAUDE.md; then
          echo "CLAUDE.md missing Commands section"
          exit 1
        fi

    - name: Check test documentation
      run: |
        if [ ! -f "tests/README.md" ]; then
          echo "Test documentation is missing"
          exit 1
        fi
        
        if [ ! -f "OPTIMIZER_TEST_SCENARIOS.md" ]; then
          echo "Optimizer test scenarios documentation is missing"
          exit 1
        fi

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python 3.13
      run: uv python install 3.13

    - name: Check dependency resolution
      run: |
        uv sync --all-extras --dev

    - name: Check for security vulnerabilities
      run: |
        uv add safety
        uv run safety check
      continue-on-error: true

    - name: Check license compatibility
      run: |
        uv add pip-licenses
        uv run pip-licenses --format=json --output-file=licenses.json
        cat licenses.json
      continue-on-error: true

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.json
        retention-days: 30

  size-impact:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Calculate code size impact
      run: |
        # Get baseline from main branch
        git checkout origin/main
        MAIN_SIZE=$(find app/ -name "*.py" -exec wc -l {} + | tail -n1 | awk '{print $1}')
        
        # Get current branch size
        git checkout ${{ github.head_ref }}
        PR_SIZE=$(find app/ -name "*.py" -exec wc -l {} + | tail -n1 | awk '{print $1}')
        
        SIZE_DIFF=$((PR_SIZE - MAIN_SIZE))
        
        echo "Code size impact: $SIZE_DIFF lines"
        echo "Main branch: $MAIN_SIZE lines"
        echo "PR branch: $PR_SIZE lines"
        
        # Create comment body
        cat > size-comment.md << EOF
        ## Code Size Impact
        
        | Metric | Main | PR | Difference |
        |--------|------|----|-----------| 
        | Lines of Code | $MAIN_SIZE | $PR_SIZE | $SIZE_DIFF |
        EOF
        
        cat size-comment.md

    - name: Upload size impact report
      uses: actions/upload-artifact@v4
      with:
        name: size-impact-report
        path: size-comment.md
        retention-days: 30

  pr-summary:
    runs-on: ubuntu-latest
    needs: [lint-and-format, quick-tests, documentation-check, dependency-check, size-impact]
    if: always()
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true

    - name: Generate PR summary comment
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let summary = "## PR Checks Summary\n\n";
          
          // Add check results
          summary += "### Check Results\n";
          summary += `- Lint & Format: ${{ needs.lint-and-format.result == 'success' && '✅' || '❌' }}\n`;
          summary += `- Quick Tests: ${{ needs.quick-tests.result == 'success' && '✅' || '❌' }}\n`;
          summary += `- Documentation: ${{ needs.documentation-check.result == 'success' && '✅' || '❌' }}\n`;
          summary += `- Dependencies: ${{ needs.dependency-check.result == 'success' && '✅' || '❌' }}\n`;
          summary += `- Size Impact: ${{ needs.size-impact.result == 'success' && '✅' || '❌' }}\n\n`;
          
          // Add size impact if available
          try {
            const sizeReport = fs.readFileSync('size-impact-report/size-comment.md', 'utf8');
            summary += sizeReport + "\n";
          } catch (e) {
            summary += "Size impact report not available\n\n";
          }
          
          // Add recommendations
          summary += "### Recommendations\n";
          if ("${{ needs.lint-and-format.result }}" !== "success") {
            summary += "- Fix linting and formatting issues\n";
          }
          if ("${{ needs.quick-tests.result }}" !== "success") {
            summary += "- Address failing tests\n";
          }
          if ("${{ needs.documentation-check.result }}" !== "success") {
            summary += "- Update documentation\n";
          }
          
          summary += "\n---\n*This comment was automatically generated by PR checks*";
          
          // Post comment on PR
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });